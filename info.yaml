# Tiny Tapeout project information
project:
  title:        "ALU"      # Project title
  author:       "JDTL10"      # Your name
  discord:      ""      # Your discord username, for communication and automatically assigning you a Tapeout role (optional)
  description:  "ALU con 5 operaciones b치sicas"      # One line description of what your project does
  language:     "Verilog" # other examples include SystemVerilog, Amaranth, VHDL, etc
  clock_hz:     0       # Clock frequency in Hz (or 0 if not applicable)

  # How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"          # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2, 6x2 or 8x2

  # Your top module name must start with "tt_um_". Make it unique by including your github username:
  top_module:  "tt_um_JDTL10"

  # List your project's source files here.
  # Source files must be in ./src and you must list each source file separately, one per line.
  # Don't forget to also update `PROJECT_SOURCES` in test/Makefile.
  source_files:
    -"ALU.v"
    -"tt_um_JDTL10.v"

# The pinout of your project. Leave unused pins blank. DO NOT delete or add any pins.
# This section is for the datasheet/website. Use descriptive names (e.g., RX, TX, MOSI, SCL, SEG_A, etc.).
pinout:
 # Inputs (ui_in[7:0])
  ui[0]: "OpSel[0]"       # Bit 0 del selector de operaci칩n
  ui[1]: "OpSel[1]"       # Bit 1 del selector de operaci칩n
  ui[2]: "OpSel[2]"       # Bit 2 del selector de operaci칩n
  ui[3]: "A[0]"           # Bit 0 del operando A
  ui[4]: "A[1]"           # Bit 1 del operando A
  ui[5]: "A[2]"           # Bit 2 del operando A
  ui[6]: "A[3]"           # Bit 3 del operando A
  ui[7]: "A[4]"           # Bit 4 del operando A

  # Bidirectional IOs (uio_in/out/oe[7:0])
  uio[0]: "A[5]"          # Bit 5 del operando A
  uio[1]: "A[6]"          # Bit 6 del operando A
  uio[2]: "B[0]"          # Bit 0 del operando B
  uio[3]: "B[1]"          # Bit 1 del operando B
  uio[4]: "B[2]"          # Bit 2 del operando B
  uio[5]: "B[3]"          # Bit 3 del operando B
  uio[6]: "B[4]"          # Bit 4 del operando B
  uio[7]: "B[5]"          # Bit 5 del operando B
  # Nota: B[6] puede definirse dentro del ALU si es constante o manejarse internamente en uio

  # Outputs (uo_out[7:0])
  uo[0]: "Result[0]"      # Bit 0 del resultado
  uo[1]: "Result[1]"      # Bit 1 del resultado
  uo[2]: "Result[2]"      # Bit 2 del resultado
  uo[3]: "Result[3]"      # Bit 3 del resultado
  uo[4]: "Result[4]"      # Bit 4 del resultado
  uo[5]: "Result[5]"      # Bit 5 del resultado
  uo[6]: "Result[6]"      # Bit 6 del resultado
  uo[7]: "Status"         # Bandera combinada: {Negative, Zero, Overflow, CarryOut}
                          # Puedes dividir este byte si prefieres mostrar cada bandera por separado

# Do not change!
yaml_version: 6
